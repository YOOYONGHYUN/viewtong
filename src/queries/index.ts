/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * View Nest API
 * API documentation for View Nest application
 * OpenAPI spec version: 1.0
 */
import type {
  AdminApprovalControllerApproveVerification200,
  AdminApprovalControllerGetPendingVerifications200AllOf,
  AdminApprovalControllerRejectVerification200,
  AuthControllerSignIn200,
  AuthControllerSignUp201,
  AuthControllerSignUpWithCompany201,
  BlogControllerCreate200,
  BlogControllerFindAll200AllOf,
  BlogControllerFindAllParams,
  BlogControllerUpdate200AllOf,
  CategoryControllerCreate200,
  CategoryControllerFindAll200AllOf,
  CategoryControllerFindAllParams,
  ChannelProposalControllerCreate200,
  ChannelProposalControllerFindAll200AllOf,
  ChannelProposalControllerFindAllParams,
  ChannelProposalControllerFindOne200,
  ChannelProposalControllerUpdate200,
  ChannelProposalControllerUpdateStatus200,
  ChannelProposalControllerUpdateStatusBody,
  CompaniesControllerCreate200,
  CompaniesControllerFindAll200AllOf,
  CompaniesControllerFindAllParams,
  CompaniesControllerFindOne200,
  CompaniesControllerFindOneByUser200,
  CompaniesControllerRemove200,
  CompaniesControllerUpdate200,
  CompaniesControllerVerifyBusinessBody,
  CompaniesControllerVerifyBusinessDefault,
  CreateBlogDto,
  CreateCategoryDto,
  CreateChannelProposalDto,
  CreateCompanyDto,
  CreateEduFormDto,
  CreateEduLinkDto,
  CreateEducationDto,
  CreateMediaFileDto,
  CreatePaymentInfoDto,
  CreateProductDto,
  CreateProductSourcingDto,
  CreateProductSourcingMatchesDto,
  CreateProposalDocumentReviewDto,
  CreateProposalInfoDto,
  CreateProposalSampleDto,
  CreateQuestionAnswerDto,
  CreateSubscriptionDto,
  CreateUserDto,
  DashboardControllerGetDashboardStats200,
  DashboardControllerGetPendingVerifications200Item,
  DashboardControllerGetPendingVerificationsParams,
  DashboardControllerGetRecentRegistrations200Item,
  DashboardControllerGetRecentRegistrationsParams,
  DashboardControllerGetVerificationStats200,
  EduFormControllerCreate200,
  EduFormControllerFindAll200AllOf,
  EduFormControllerFindAllParams,
  EduLinkControllerCreate200,
  EduLinkControllerFindAll200AllOf,
  EduLinkControllerFindAllParams,
  EducationControllerCreate200,
  EducationControllerFindAll200AllOf,
  EducationControllerFindAllParams,
  EducationControllerFindOne200,
  EducationControllerRemove200,
  EducationControllerUpdate200,
  EmailVerificationControllerSendVerificationEmail200,
  EmailVerificationControllerVerifyCode200,
  GenericResponse,
  MediaFileControllerInitializeUpload200,
  PaymentInfoControllerCancel200,
  PaymentInfoControllerCreate200,
  PaymentInfoControllerFindAll200AllOf,
  PaymentInfoControllerFindAllParams,
  PaymentInfoControllerFindOne200,
  PaymentInfoControllerUpdate200,
  ProductSourcingMatchControllerFindMyMatchedProducts200AllOf,
  ProductSourcingMatchControllerFindMyMatchedProductsParams,
  ProductsControllerCreate200,
  ProductsControllerFindAll200AllOf,
  ProductsControllerFindAllParams,
  ProductsControllerFindOne200,
  ProductsControllerUpdate200,
  ProposalDocumentReviewControllerCreate200,
  ProposalDocumentReviewControllerFindAll200AllOf,
  ProposalDocumentReviewControllerFindAllParams,
  ProposalDocumentReviewControllerFindOne200,
  ProposalDocumentReviewControllerRemove200,
  ProposalDocumentReviewControllerUpdate200,
  ProposalInfoControllerCreate200,
  ProposalInfoControllerFindAll200AllOf,
  ProposalInfoControllerFindAllParams,
  ProposalInfoControllerFindOne200,
  ProposalInfoControllerUpdate200,
  ProposalLogControllerFindAll200AllOf,
  ProposalLogControllerFindAllParams,
  ProposalLogControllerFindOne200,
  ProposalSampleControllerCreate200,
  ProposalSampleControllerFindAll200AllOf,
  ProposalSampleControllerFindAllParams,
  ProposalSampleControllerFindOne200,
  QuestionsControllerCreate200,
  QuestionsControllerCreatePublic200,
  QuestionsControllerDelete200,
  QuestionsControllerFindAll200AllOf,
  QuestionsControllerFindAllParams,
  QuestionsControllerFindOneBy200,
  SendVerificationDto,
  SignInAuthDto,
  SignUpAuthDto,
  SourcingControllerCreate200,
  SourcingControllerCreateProductSourcingMatches200,
  SourcingControllerFindAll200AllOf,
  SourcingControllerFindAllParams,
  SourcingControllerFindOne200,
  SourcingControllerUpdate200,
  SourcingControllerUpdateStatus200,
  SourcingControllerUpdateStatusBody,
  SubscriptionsControllerCancel200,
  SubscriptionsControllerCreate200,
  SubscriptionsControllerFindAll200AllOf,
  SubscriptionsControllerFindAllParams,
  SubscriptionsControllerFindOne200,
  SubscriptionsControllerUpdate200,
  UpdateBlogDto,
  UpdateCategoryDto,
  UpdateChannelProposalDto,
  UpdateCompanyDto,
  UpdateEduLinkDto,
  UpdateEducationDto,
  UpdateMultipleProductStatusDto,
  UpdatePaymentInfoDto,
  UpdateProductDto,
  UpdateProductSourcingDto,
  UpdateProposalDocumentReviewDto,
  UpdateProposalInfoDto,
  UpdateProposalSampleDto,
  UpdateQuestionAnswerDto,
  UpdateSubscriptionDto,
  UserCompanySignUpAuthDto,
  UserResponseDto,
  VerifyCodeDto
} from './model'
import { customInstance } from '../lib/axios';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


  export const appControllerGetHello = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/`, method: 'GET'
    },
      options);
    }
  
/**
 * @deprecated
 * @summary use auth/signup
 */
export const usersControllerCreateUser = (
    createUserDto: CreateUserDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserResponseDto>(
      {url: `/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createUserDto
    },
      options);
    }
  
/**
 * @summary Get current user information::All
 */
export const usersControllerGetSelf = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserResponseDto>(
      {url: `/users/me`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get user by ID::Admin
 */
export const usersControllerGetUser = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserResponseDto>(
      {url: `/users/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update user role::Admin
 */
export const usersControllerUpdateRole = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<UserResponseDto>(
      {url: `/users/${id}/role`, method: 'PATCH'
    },
      options);
    }
  
/**
 * @summary Sign up user
 */
export const authControllerSignUp = (
    signUpAuthDto: SignUpAuthDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AuthControllerSignUp201>(
      {url: `/auth/signup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signUpAuthDto
    },
      options);
    }
  
/**
 * @summary Sign up user with company
 */
export const authControllerSignUpWithCompany = (
    userCompanySignUpAuthDto: UserCompanySignUpAuthDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AuthControllerSignUpWithCompany201>(
      {url: `/auth/signup-with-company`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCompanySignUpAuthDto
    },
      options);
    }
  
/**
 * @summary Sign in user
 */
export const authControllerSignIn = (
    signInAuthDto: SignInAuthDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AuthControllerSignIn200>(
      {url: `/auth/signin`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signInAuthDto
    },
      options);
    }
  
/**
 * @summary Create a new company::ALL
 */
export const companiesControllerCreate = (
    createCompanyDto: CreateCompanyDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CompaniesControllerCreate200>(
      {url: `/companies`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCompanyDto
    },
      options);
    }
  
/**
 * @summary Get all companies::Admin
 */
export const companiesControllerFindAll = (
    params?: CompaniesControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CompaniesControllerFindAll200AllOf>(
      {url: `/companies`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get a company by user id::ALL
 */
export const companiesControllerFindOneByUser = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CompaniesControllerFindOneByUser200>(
      {url: `/companies/my`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get a company by id::ALL
 */
export const companiesControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CompaniesControllerFindOne200>(
      {url: `/companies/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update a company::ALL
 */
export const companiesControllerUpdate = (
    id: string,
    updateCompanyDto: UpdateCompanyDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CompaniesControllerUpdate200>(
      {url: `/companies/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateCompanyDto
    },
      options);
    }
  
/**
 * @summary Delete a company::Admin
 */
export const companiesControllerRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CompaniesControllerRemove200>(
      {url: `/companies/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary Verify business information::ALL
 */
export const companiesControllerVerifyBusiness = (
    companiesControllerVerifyBusinessBody: CompaniesControllerVerifyBusinessBody,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CompaniesControllerVerifyBusinessDefault>(
      {url: `/companies/verify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: companiesControllerVerifyBusinessBody
    },
      options);
    }
  
/**
 * @summary ÏóÖÎ°úÎìú Ï¥àÍ∏∞Ìôî
 */
export const mediaFileControllerInitializeUpload = (
    createMediaFileDto: CreateMediaFileDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MediaFileControllerInitializeUpload200>(
      {url: `/media-files/upload-url`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createMediaFileDto
    },
      options);
    }
  
/**
 * @summary Get dashboard stats
 */
export const dashboardControllerGetDashboardStats = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DashboardControllerGetDashboardStats200>(
      {url: `/admin/dashboard/stats`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get recent registrations
 */
export const dashboardControllerGetRecentRegistrations = (
    params?: DashboardControllerGetRecentRegistrationsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DashboardControllerGetRecentRegistrations200Item[]>(
      {url: `/admin/dashboard/recent-registrations`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get pending verifications
 */
export const dashboardControllerGetPendingVerifications = (
    params?: DashboardControllerGetPendingVerificationsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DashboardControllerGetPendingVerifications200Item[]>(
      {url: `/admin/dashboard/pending-verifications`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get verification statistics
 */
export const dashboardControllerGetVerificationStats = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<DashboardControllerGetVerificationStats200>(
      {url: `/admin/dashboard/verification-stats`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Î™®Îì† ÏÉÅÌíà Ï°∞Ìöå (ÏÇ¨Ïö©Ïûê Í∂åÌïúÏóê Îî∞Îùº ÌïÑÌÑ∞ÎßÅ)::All
 */
export const productsControllerFindAll = (
    params?: ProductsControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProductsControllerFindAll200AllOf>(
      {url: `/products`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary ÏÉàÎ°úÏö¥ ÏÉÅÌíà ÏÉùÏÑ±::Admin,Business
 */
export const productsControllerCreate = (
    createProductDto: CreateProductDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProductsControllerCreate200>(
      {url: `/products`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProductDto
    },
      options);
    }
  
/**
 * @summary IDÎ°ú ÌäπÏ†ï ÏÉÅÌíà Ï°∞Ìöå::All
 */
export const productsControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProductsControllerFindOne200>(
      {url: `/products/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary ÌäπÏ†ï ÏÉÅÌíà Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏::Admin,Business
 */
export const productsControllerUpdate = (
    id: number,
    updateProductDto: UpdateProductDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProductsControllerUpdate200>(
      {url: `/products/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateProductDto
    },
      options);
    }
  
/**
 * @summary ÌäπÏ†ï ÏÉÅÌíà ÏÇ≠Ï†ú::Admin
 */
export const productsControllerRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/products/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary Ïó¨Îü¨ ÏÉÅÌíà ÏÉÅÌÉú ÏùºÍ¥Ñ ÏóÖÎç∞Ïù¥Ìä∏::Admin
 */
export const productsControllerUpdateMultipleStatus = (
    updateMultipleProductStatusDto: UpdateMultipleProductStatusDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/products/status/batch`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateMultipleProductStatusDto
    },
      options);
    }
  
/**
 * @summary Get all proposal logs::Admin
 */
export const proposalLogControllerFindAll = (
    params?: ProposalLogControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProposalLogControllerFindAll200AllOf>(
      {url: `/proposal-logs`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get a proposal log by id::Admin
 */
export const proposalLogControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProposalLogControllerFindOne200>(
      {url: `/proposal-logs/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Î¨∏ÏÑú Í≤ÄÌÜ† Î™©Î°ù Ï°∞Ìöå::Admin,Business
 */
export const proposalDocumentReviewControllerFindAll = (
    params?: ProposalDocumentReviewControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProposalDocumentReviewControllerFindAll200AllOf>(
      {url: `/proposal-document-reviews`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Î¨∏ÏÑú Í≤ÄÌÜ† ÏÉùÏÑ±::Admin,Business
 */
export const proposalDocumentReviewControllerCreate = (
    createProposalDocumentReviewDto: CreateProposalDocumentReviewDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProposalDocumentReviewControllerCreate200>(
      {url: `/proposal-document-reviews`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProposalDocumentReviewDto
    },
      options);
    }
  
/**
 * @summary Î¨∏ÏÑú Í≤ÄÌÜ† ÏÉÅÏÑ∏ Ï°∞Ìöå::Admin,Business
 */
export const proposalDocumentReviewControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProposalDocumentReviewControllerFindOne200>(
      {url: `/proposal-document-reviews/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Î¨∏ÏÑú Í≤ÄÌÜ† ÏàòÏ†ï::Admin,Business
 */
export const proposalDocumentReviewControllerUpdate = (
    id: number,
    updateProposalDocumentReviewDto: UpdateProposalDocumentReviewDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProposalDocumentReviewControllerUpdate200>(
      {url: `/proposal-document-reviews/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateProposalDocumentReviewDto
    },
      options);
    }
  
/**
 * @summary Î¨∏ÏÑú Í≤ÄÌÜ† ÏÇ≠Ï†ú::Admin
 */
export const proposalDocumentReviewControllerRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProposalDocumentReviewControllerRemove200>(
      {url: `/proposal-document-reviews/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary ÏÉàÎ°úÏö¥ ÏÉÅÌíà ÏÜåÏã± ÏöîÏ≤≠ ÏÉùÏÑ±::Admin,Merchant
 */
export const sourcingControllerCreate = (
    createProductSourcingDto: CreateProductSourcingDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SourcingControllerCreate200>(
      {url: `/sourcing/product`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProductSourcingDto
    },
      options);
    }
  
/**
 * @summary ÏÉÅÌíà ÏÜåÏã± ÏöîÏ≤≠ Î™©Î°ù Ï°∞Ìöå::Admin,Merchant
 */
export const sourcingControllerFindAll = (
    params?: SourcingControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SourcingControllerFindAll200AllOf>(
      {url: `/sourcing/product`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary IDÎ°ú ÌäπÏ†ï ÏÉÅÌíà ÏÜåÏã± ÏöîÏ≤≠ Ï°∞Ìöå::Admin,Merchant
 */
export const sourcingControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SourcingControllerFindOne200>(
      {url: `/sourcing/product/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary ÏÉÅÌíà ÏÜåÏã± ÏöîÏ≤≠ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏::Admin,Merchant
 */
export const sourcingControllerUpdate = (
    id: number,
    updateProductSourcingDto: UpdateProductSourcingDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SourcingControllerUpdate200>(
      {url: `/sourcing/product/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateProductSourcingDto
    },
      options);
    }
  
/**
 * @summary ÏÉÅÌíà ÏÜåÏã± ÏöîÏ≤≠ ÏÇ≠Ï†ú::Admin,Merchant
 */
export const sourcingControllerRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/sourcing/product/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary ÏÉÅÌíà ÏÜåÏã± ÏöîÏ≤≠ ÏÉÅÌÉú Î≥ÄÍ≤Ω::Admin
 */
export const sourcingControllerUpdateStatus = (
    id: number,
    sourcingControllerUpdateStatusBody: SourcingControllerUpdateStatusBody,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SourcingControllerUpdateStatus200>(
      {url: `/sourcing/product/${id}/status`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: sourcingControllerUpdateStatusBody
    },
      options);
    }
  
/**
 * @summary ÏÉÅÌíà ÏÜåÏã± ÏöîÏ≤≠Ïóê ÎåÄÌïú ÏÉÅÌíà Îß§Ïπ≠ Ï†ïÎ≥¥ ÏÉùÏÑ±::Admin
 */
export const sourcingControllerCreateProductSourcingMatches = (
    sourcingId: number,
    createProductSourcingMatchesDto: CreateProductSourcingMatchesDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SourcingControllerCreateProductSourcingMatches200>(
      {url: `/sourcing/product/${sourcingId}/matches`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProductSourcingMatchesDto
    },
      options);
    }
  
/**
 * Ï£ºÏñ¥ÏßÑ ÏÇ¨Ïö©Ïûê ID (ÌïÑÏàò) Î∞è ÏÜåÏã± ID (ÏÑ†ÌÉù)Ïóê Îî∞Îùº Îß§Ïπ≠Îêú ÏÉÅÌíà Î™©Î°ùÏùÑ ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖòÌïòÏó¨ Î∞òÌôòÌï©ÎãàÎã§.
 * @summary ÏÇ¨Ïö©Ïûê Í¥ÄÎ†® Îß§Ïπ≠ ÏÉÅÌíà Î™©Î°ù Ï°∞Ìöå (ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò)::Admin,Merchant
 */
export const productSourcingMatchControllerFindMyMatchedProducts = (
    params?: ProductSourcingMatchControllerFindMyMatchedProductsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProductSourcingMatchControllerFindMyMatchedProducts200AllOf>(
      {url: `/sourcing/product-matches`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Í≤∞Ï†ú Ï†ïÎ≥¥ ÏÉùÏÑ±::All
 */
export const paymentInfoControllerCreate = (
    createPaymentInfoDto: CreatePaymentInfoDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PaymentInfoControllerCreate200>(
      {url: `/payments`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createPaymentInfoDto
    },
      options);
    }
  
/**
 * @summary Î™®Îì† Í≤∞Ï†ú Ï†ïÎ≥¥ Ï°∞Ìöå::All
 */
export const paymentInfoControllerFindAll = (
    params?: PaymentInfoControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PaymentInfoControllerFindAll200AllOf>(
      {url: `/payments`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Í≤∞Ï†ú Ï†ïÎ≥¥ ÏÉÅÏÑ∏ Ï°∞Ìöå::All
 */
export const paymentInfoControllerFindOne = (
    stlmId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PaymentInfoControllerFindOne200>(
      {url: `/payments/${stlmId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Í≤∞Ï†ú Ï†ïÎ≥¥ ÏàòÏ†ï::Admin
 */
export const paymentInfoControllerUpdate = (
    stlmId: string,
    updatePaymentInfoDto: UpdatePaymentInfoDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PaymentInfoControllerUpdate200>(
      {url: `/payments/${stlmId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updatePaymentInfoDto
    },
      options);
    }
  
/**
 * @summary Í≤∞Ï†ú Ï∑®ÏÜå::Admin
 */
export const paymentInfoControllerCancel = (
    stlmId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<PaymentInfoControllerCancel200>(
      {url: `/payments/${stlmId}/cancel`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏΩîÎìú Î∞úÏÜ°
 */
export const emailVerificationControllerSendVerificationEmail = (
    sendVerificationDto: SendVerificationDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EmailVerificationControllerSendVerificationEmail200>(
      {url: `/email-verification/send`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendVerificationDto
    },
      options);
    }
  
/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏΩîÎìú Í≤ÄÏ¶ù
 */
export const emailVerificationControllerVerifyCode = (
    verifyCodeDto: VerifyCodeDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EmailVerificationControllerVerifyCode200>(
      {url: `/email-verification/verify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: verifyCodeDto
    },
      options);
    }
  
/**
 * @summary Create a new blog::Admin
 */
export const blogControllerCreate = (
    createBlogDto: CreateBlogDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BlogControllerCreate200>(
      {url: `/blog`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createBlogDto
    },
      options);
    }
  
/**
 * @summary Get all blogs::ALL
 */
export const blogControllerFindAll = (
    params?: BlogControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BlogControllerFindAll200AllOf>(
      {url: `/blog`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get a blog by id::ALL
 */
export const blogControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/blog/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update a blog by id::Admin
 */
export const blogControllerUpdate = (
    id: string,
    updateBlogDto: UpdateBlogDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<BlogControllerUpdate200AllOf>(
      {url: `/blog/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateBlogDto
    },
      options);
    }
  
/**
 * @summary Delete a blog by id::Admin
 */
export const blogControllerRemove = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/blog/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary Create a new category::Admin
 */
export const categoryControllerCreate = (
    createCategoryDto: CreateCategoryDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CategoryControllerCreate200>(
      {url: `/categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCategoryDto
    },
      options);
    }
  
/**
 * @summary Get all categories::ALL
 */
export const categoryControllerFindAll = (
    params?: CategoryControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<CategoryControllerFindAll200AllOf>(
      {url: `/categories`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get category by ID::ALL
 */
export const categoryControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GenericResponse>(
      {url: `/categories/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update category::Admin
 */
export const categoryControllerUpdate = (
    id: number,
    updateCategoryDto: UpdateCategoryDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GenericResponse>(
      {url: `/categories/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateCategoryDto
    },
      options);
    }
  
/**
 * @summary Delete category::Admin
 */
export const categoryControllerRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/categories/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary Get category by code::ALL
 */
export const categoryControllerFindOneByCd = (
    cd: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GenericResponse>(
      {url: `/categories/code/${cd}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Create a new subscription::All
 */
export const subscriptionsControllerCreate = (
    createSubscriptionDto: CreateSubscriptionDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SubscriptionsControllerCreate200>(
      {url: `/subscriptions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createSubscriptionDto
    },
      options);
    }
  
/**
 * @summary Get all subscriptions::All
 */
export const subscriptionsControllerFindAll = (
    params?: SubscriptionsControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SubscriptionsControllerFindAll200AllOf>(
      {url: `/subscriptions`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get a subscription by id::All
 */
export const subscriptionsControllerFindOne = (
    sbscrbId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SubscriptionsControllerFindOne200>(
      {url: `/subscriptions/${sbscrbId}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update a subscription::Admin
 */
export const subscriptionsControllerUpdate = (
    sbscrbId: string,
    updateSubscriptionDto: UpdateSubscriptionDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SubscriptionsControllerUpdate200>(
      {url: `/subscriptions/${sbscrbId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateSubscriptionDto
    },
      options);
    }
  
/**
 * @summary Cancel a subscription::All
 */
export const subscriptionsControllerCancel = (
    sbscrbId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<SubscriptionsControllerCancel200>(
      {url: `/subscriptions/${sbscrbId}/cancel`, method: 'PUT'
    },
      options);
    }
  
/**
 * @summary Ï†úÏïàÍ∏∞ÌöçÏã†Ï≤≠ Î™©Î°ù Ï°∞Ìöå::Admin,Business
 */
export const channelProposalControllerFindAll = (
    params?: ChannelProposalControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ChannelProposalControllerFindAll200AllOf>(
      {url: `/channel-proposals`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Ï†úÏïàÍ∏∞ÌöçÏã†Ï≤≠ ÏÉùÏÑ±::Admin,Business
 */
export const channelProposalControllerCreate = (
    createChannelProposalDto: CreateChannelProposalDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ChannelProposalControllerCreate200>(
      {url: `/channel-proposals`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createChannelProposalDto
    },
      options);
    }
  
/**
 * @summary Ï†úÏïàÍ∏∞ÌöçÏã†Ï≤≠ ÏÉÅÏÑ∏ Ï°∞Ìöå::Admin,Business
 */
export const channelProposalControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ChannelProposalControllerFindOne200>(
      {url: `/channel-proposals/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Ï†úÏïàÍ∏∞ÌöçÏã†Ï≤≠ ÏàòÏ†ï::Admin,Business
 */
export const channelProposalControllerUpdate = (
    id: number,
    updateChannelProposalDto: UpdateChannelProposalDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ChannelProposalControllerUpdate200>(
      {url: `/channel-proposals/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateChannelProposalDto
    },
      options);
    }
  
/**
 * @summary Ï†úÏïàÍ∏∞ÌöçÏã†Ï≤≠ ÏÉÅÌÉú Î≥ÄÍ≤Ω::Admin
 */
export const channelProposalControllerUpdateStatus = (
    channelProposalControllerUpdateStatusBody: ChannelProposalControllerUpdateStatusBody,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ChannelProposalControllerUpdateStatus200>(
      {url: `/channel-proposals/status`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: channelProposalControllerUpdateStatusBody
    },
      options);
    }
  
/**
 * @summary Create a new proposal info::Admin,Business
 */
export const proposalInfoControllerCreate = (
    createProposalInfoDto: CreateProposalInfoDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProposalInfoControllerCreate200>(
      {url: `/proposal-info`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProposalInfoDto
    },
      options);
    }
  
/**
 * @summary Get all proposal infos::Admin,Business
 */
export const proposalInfoControllerFindAll = (
    params?: ProposalInfoControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProposalInfoControllerFindAll200AllOf>(
      {url: `/proposal-info`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Get a proposal info by id::Admin,Business
 */
export const proposalInfoControllerFindOne = (
    prpslDocPageNo: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProposalInfoControllerFindOne200>(
      {url: `/proposal-info/${prpslDocPageNo}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Update a proposal info::Admin,Business
 */
export const proposalInfoControllerUpdate = (
    prpslDocPageNo: number,
    updateProposalInfoDto: UpdateProposalInfoDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProposalInfoControllerUpdate200>(
      {url: `/proposal-info/${prpslDocPageNo}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateProposalInfoDto
    },
      options);
    }
  
/**
 * @summary Delete a proposal info::Admin,Business
 */
export const proposalInfoControllerRemove = (
    prpslDocPageNo: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/proposal-info/${prpslDocPageNo}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary Î¨∏Ïùò Î™©Î°ù Ï°∞Ìöå::Admin,Business,Merchant
 */
export const questionsControllerFindAll = (
    params?: QuestionsControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<QuestionsControllerFindAll200AllOf>(
      {url: `/questions`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Î¨∏Ïùò ÏÉùÏÑ±::all
 */
export const questionsControllerCreate = (
    createQuestionAnswerDto: CreateQuestionAnswerDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<QuestionsControllerCreate200>(
      {url: `/questions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createQuestionAnswerDto
    },
      options);
    }
  
/**
 * @summary Î¨∏Ïùò ÏÉÅÏÑ∏ Ï°∞Ìöå::Admin,Business,Merchant
 */
export const questionsControllerFindOneBy = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<QuestionsControllerFindOneBy200>(
      {url: `/questions/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Î¨∏Ïùò ÏàòÏ†ï
 */
export const questionsControllerUpdate = (
    id: number,
    updateQuestionAnswerDto: UpdateQuestionAnswerDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GenericResponse>(
      {url: `/questions/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateQuestionAnswerDto
    },
      options);
    }
  
/**
 * @summary 1:1 Î¨∏Ïùò ÏÇ≠Ï†ú
 */
export const questionsControllerDelete = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<QuestionsControllerDelete200>(
      {url: `/questions/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary Î¨∏Ïùò ÏÉùÏÑ±::Public
 */
export const questionsControllerCreatePublic = (
    createQuestionAnswerDto: CreateQuestionAnswerDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<QuestionsControllerCreatePublic200>(
      {url: `/questions/public`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createQuestionAnswerDto
    },
      options);
    }
  
/**
 * @summary ÍµêÏú° Ï†ïÎ≥¥ ÏÉùÏÑ±::Admin
 */
export const educationControllerCreate = (
    createEducationDto: CreateEducationDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EducationControllerCreate200>(
      {url: `/education`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createEducationDto
    },
      options);
    }
  
/**
 * @summary ÍµêÏú° Ï†ïÎ≥¥ Î™©Î°ù Ï°∞Ìöå::All
 */
export const educationControllerFindAll = (
    params?: EducationControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EducationControllerFindAll200AllOf>(
      {url: `/education`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary ÍµêÏú° Ï†ïÎ≥¥ ÏÉÅÏÑ∏ Ï°∞Ìöå::All
 */
export const educationControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EducationControllerFindOne200>(
      {url: `/education/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary ÍµêÏú° Ï†ïÎ≥¥ ÏàòÏ†ï::Admin
 */
export const educationControllerUpdate = (
    id: number,
    updateEducationDto: UpdateEducationDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EducationControllerUpdate200>(
      {url: `/education/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateEducationDto
    },
      options);
    }
  
/**
 * @summary ÍµêÏú° Ï†ïÎ≥¥ ÏÇ≠Ï†ú::Admin
 */
export const educationControllerRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EducationControllerRemove200>(
      {url: `/education/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @summary ÍµêÏú° Ïã†Ï≤≠ÏÑú ÏÉùÏÑ±::ALL
 */
export const eduFormControllerCreate = (
    createEduFormDto: CreateEduFormDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EduFormControllerCreate200>(
      {url: `/education-forms`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createEduFormDto
    },
      options);
    }
  
/**
 * @summary ÍµêÏú° Ïã†Ï≤≠ÏÑú Î™©Î°ù Ï°∞Ìöå::Admin
 */
export const eduFormControllerFindAll = (
    params?: EduFormControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EduFormControllerFindAll200AllOf>(
      {url: `/education-forms`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary ÍµêÏú° Ïã†Ï≤≠ÏÑú ÏÉÅÏÑ∏ Ï°∞Ìöå::Admin
 */
export const eduFormControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GenericResponse>(
      {url: `/education-forms/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary ÍµêÏú° ÎßÅÌÅ¨ ÏÉùÏÑ±::Admin
 */
export const eduLinkControllerCreate = (
    createEduLinkDto: CreateEduLinkDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EduLinkControllerCreate200>(
      {url: `/education-links`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createEduLinkDto
    },
      options);
    }
  
/**
 * @summary ÍµêÏú° ÎßÅÌÅ¨ Î™©Î°ù Ï°∞Ìöå::All
 */
export const eduLinkControllerFindAll = (
    params?: EduLinkControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<EduLinkControllerFindAll200AllOf>(
      {url: `/education-links`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary ÍµêÏú° ÎßÅÌÅ¨ ÏÉÅÏÑ∏ Ï°∞Ìöå::All
 */
export const eduLinkControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GenericResponse>(
      {url: `/education-links/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary ÍµêÏú° ÎßÅÌÅ¨ ÏàòÏ†ï::Admin
 */
export const eduLinkControllerUpdate = (
    id: number,
    updateEduLinkDto: UpdateEduLinkDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GenericResponse>(
      {url: `/education-links/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateEduLinkDto
    },
      options);
    }
  
/**
 * @summary ÍµêÏú° ÎßÅÌÅ¨ ÏÇ≠Ï†ú::Admin
 */
export const eduLinkControllerRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GenericResponse>(
      {url: `/education-links/${id}`, method: 'DELETE'
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Verify business
 */
export const businessVerificationControllerVerifyBusiness = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/business-verification/verify`, method: 'POST'
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Verify business
 */
export const businessVerificationControllerGetVerificationStatus = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<void>(
      {url: `/business-verification/status`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Get pending verifications
 */
export const adminApprovalControllerGetPendingVerifications = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AdminApprovalControllerGetPendingVerifications200AllOf>(
      {url: `/admin/verifications/pending`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Approve verification
 */
export const adminApprovalControllerApproveVerification = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AdminApprovalControllerApproveVerification200>(
      {url: `/admin/verifications/${id}/approve`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Reject verification
 */
export const adminApprovalControllerRejectVerification = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AdminApprovalControllerRejectVerification200>(
      {url: `/admin/verifications/${id}/reject`, method: 'POST'
    },
      options);
    }
  
/**
 * @summary Ï†úÏïàÎ¨∏ÏÑú ÏÉòÌîå ÏÉùÏÑ±
 */
export const proposalSampleControllerCreate = (
    createProposalSampleDto: CreateProposalSampleDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProposalSampleControllerCreate200>(
      {url: `/proposal-samples`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createProposalSampleDto
    },
      options);
    }
  
/**
 * @summary Ï†úÏïàÎ¨∏ÏÑú ÏÉòÌîå Î™©Î°ù Ï°∞Ìöå
 */
export const proposalSampleControllerFindAll = (
    params?: ProposalSampleControllerFindAllParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProposalSampleControllerFindAll200AllOf>(
      {url: `/proposal-samples`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Ï†úÏïàÎ¨∏ÏÑú ÏÉòÌîå ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const proposalSampleControllerFindOne = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ProposalSampleControllerFindOne200>(
      {url: `/proposal-samples/${id}`, method: 'GET'
    },
      options);
    }
  
/**
 * @summary Ï†úÏïàÎ¨∏ÏÑú ÏÉòÌîå ÏàòÏ†ï
 */
export const proposalSampleControllerUpdate = (
    id: number,
    updateProposalSampleDto: UpdateProposalSampleDto,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GenericResponse>(
      {url: `/proposal-samples/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateProposalSampleDto
    },
      options);
    }
  
/**
 * @summary Ï†úÏïàÎ¨∏ÏÑú ÏÉòÌîå ÏÇ≠Ï†ú
 */
export const proposalSampleControllerRemove = (
    id: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<GenericResponse>(
      {url: `/proposal-samples/${id}`, method: 'DELETE'
    },
      options);
    }
  

type AwaitedInput<T> = PromiseLike<T> | T;

    type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type AppControllerGetHelloResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type UsersControllerCreateUserResult = NonNullable<Awaited<ReturnType<typeof usersControllerCreateUser>>>
export type UsersControllerGetSelfResult = NonNullable<Awaited<ReturnType<typeof usersControllerGetSelf>>>
export type UsersControllerGetUserResult = NonNullable<Awaited<ReturnType<typeof usersControllerGetUser>>>
export type UsersControllerUpdateRoleResult = NonNullable<Awaited<ReturnType<typeof usersControllerUpdateRole>>>
export type AuthControllerSignUpResult = NonNullable<Awaited<ReturnType<typeof authControllerSignUp>>>
export type AuthControllerSignUpWithCompanyResult = NonNullable<Awaited<ReturnType<typeof authControllerSignUpWithCompany>>>
export type AuthControllerSignInResult = NonNullable<Awaited<ReturnType<typeof authControllerSignIn>>>
export type CompaniesControllerCreateResult = NonNullable<Awaited<ReturnType<typeof companiesControllerCreate>>>
export type CompaniesControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof companiesControllerFindAll>>>
export type CompaniesControllerFindOneByUserResult = NonNullable<Awaited<ReturnType<typeof companiesControllerFindOneByUser>>>
export type CompaniesControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof companiesControllerFindOne>>>
export type CompaniesControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof companiesControllerUpdate>>>
export type CompaniesControllerRemoveResult = NonNullable<Awaited<ReturnType<typeof companiesControllerRemove>>>
export type CompaniesControllerVerifyBusinessResult = NonNullable<Awaited<ReturnType<typeof companiesControllerVerifyBusiness>>>
export type MediaFileControllerInitializeUploadResult = NonNullable<Awaited<ReturnType<typeof mediaFileControllerInitializeUpload>>>
export type DashboardControllerGetDashboardStatsResult = NonNullable<Awaited<ReturnType<typeof dashboardControllerGetDashboardStats>>>
export type DashboardControllerGetRecentRegistrationsResult = NonNullable<Awaited<ReturnType<typeof dashboardControllerGetRecentRegistrations>>>
export type DashboardControllerGetPendingVerificationsResult = NonNullable<Awaited<ReturnType<typeof dashboardControllerGetPendingVerifications>>>
export type DashboardControllerGetVerificationStatsResult = NonNullable<Awaited<ReturnType<typeof dashboardControllerGetVerificationStats>>>
export type ProductsControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof productsControllerFindAll>>>
export type ProductsControllerCreateResult = NonNullable<Awaited<ReturnType<typeof productsControllerCreate>>>
export type ProductsControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof productsControllerFindOne>>>
export type ProductsControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof productsControllerUpdate>>>
export type ProductsControllerRemoveResult = NonNullable<Awaited<ReturnType<typeof productsControllerRemove>>>
export type ProductsControllerUpdateMultipleStatusResult = NonNullable<Awaited<ReturnType<typeof productsControllerUpdateMultipleStatus>>>
export type ProposalLogControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof proposalLogControllerFindAll>>>
export type ProposalLogControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof proposalLogControllerFindOne>>>
export type ProposalDocumentReviewControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof proposalDocumentReviewControllerFindAll>>>
export type ProposalDocumentReviewControllerCreateResult = NonNullable<Awaited<ReturnType<typeof proposalDocumentReviewControllerCreate>>>
export type ProposalDocumentReviewControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof proposalDocumentReviewControllerFindOne>>>
export type ProposalDocumentReviewControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof proposalDocumentReviewControllerUpdate>>>
export type ProposalDocumentReviewControllerRemoveResult = NonNullable<Awaited<ReturnType<typeof proposalDocumentReviewControllerRemove>>>
export type SourcingControllerCreateResult = NonNullable<Awaited<ReturnType<typeof sourcingControllerCreate>>>
export type SourcingControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof sourcingControllerFindAll>>>
export type SourcingControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof sourcingControllerFindOne>>>
export type SourcingControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof sourcingControllerUpdate>>>
export type SourcingControllerRemoveResult = NonNullable<Awaited<ReturnType<typeof sourcingControllerRemove>>>
export type SourcingControllerUpdateStatusResult = NonNullable<Awaited<ReturnType<typeof sourcingControllerUpdateStatus>>>
export type SourcingControllerCreateProductSourcingMatchesResult = NonNullable<Awaited<ReturnType<typeof sourcingControllerCreateProductSourcingMatches>>>
export type ProductSourcingMatchControllerFindMyMatchedProductsResult = NonNullable<Awaited<ReturnType<typeof productSourcingMatchControllerFindMyMatchedProducts>>>
export type PaymentInfoControllerCreateResult = NonNullable<Awaited<ReturnType<typeof paymentInfoControllerCreate>>>
export type PaymentInfoControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof paymentInfoControllerFindAll>>>
export type PaymentInfoControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof paymentInfoControllerFindOne>>>
export type PaymentInfoControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof paymentInfoControllerUpdate>>>
export type PaymentInfoControllerCancelResult = NonNullable<Awaited<ReturnType<typeof paymentInfoControllerCancel>>>
export type EmailVerificationControllerSendVerificationEmailResult = NonNullable<Awaited<ReturnType<typeof emailVerificationControllerSendVerificationEmail>>>
export type EmailVerificationControllerVerifyCodeResult = NonNullable<Awaited<ReturnType<typeof emailVerificationControllerVerifyCode>>>
export type BlogControllerCreateResult = NonNullable<Awaited<ReturnType<typeof blogControllerCreate>>>
export type BlogControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof blogControllerFindAll>>>
export type BlogControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof blogControllerFindOne>>>
export type BlogControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof blogControllerUpdate>>>
export type BlogControllerRemoveResult = NonNullable<Awaited<ReturnType<typeof blogControllerRemove>>>
export type CategoryControllerCreateResult = NonNullable<Awaited<ReturnType<typeof categoryControllerCreate>>>
export type CategoryControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof categoryControllerFindAll>>>
export type CategoryControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof categoryControllerFindOne>>>
export type CategoryControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof categoryControllerUpdate>>>
export type CategoryControllerRemoveResult = NonNullable<Awaited<ReturnType<typeof categoryControllerRemove>>>
export type CategoryControllerFindOneByCdResult = NonNullable<Awaited<ReturnType<typeof categoryControllerFindOneByCd>>>
export type SubscriptionsControllerCreateResult = NonNullable<Awaited<ReturnType<typeof subscriptionsControllerCreate>>>
export type SubscriptionsControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof subscriptionsControllerFindAll>>>
export type SubscriptionsControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof subscriptionsControllerFindOne>>>
export type SubscriptionsControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof subscriptionsControllerUpdate>>>
export type SubscriptionsControllerCancelResult = NonNullable<Awaited<ReturnType<typeof subscriptionsControllerCancel>>>
export type ChannelProposalControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof channelProposalControllerFindAll>>>
export type ChannelProposalControllerCreateResult = NonNullable<Awaited<ReturnType<typeof channelProposalControllerCreate>>>
export type ChannelProposalControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof channelProposalControllerFindOne>>>
export type ChannelProposalControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof channelProposalControllerUpdate>>>
export type ChannelProposalControllerUpdateStatusResult = NonNullable<Awaited<ReturnType<typeof channelProposalControllerUpdateStatus>>>
export type ProposalInfoControllerCreateResult = NonNullable<Awaited<ReturnType<typeof proposalInfoControllerCreate>>>
export type ProposalInfoControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof proposalInfoControllerFindAll>>>
export type ProposalInfoControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof proposalInfoControllerFindOne>>>
export type ProposalInfoControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof proposalInfoControllerUpdate>>>
export type ProposalInfoControllerRemoveResult = NonNullable<Awaited<ReturnType<typeof proposalInfoControllerRemove>>>
export type QuestionsControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof questionsControllerFindAll>>>
export type QuestionsControllerCreateResult = NonNullable<Awaited<ReturnType<typeof questionsControllerCreate>>>
export type QuestionsControllerFindOneByResult = NonNullable<Awaited<ReturnType<typeof questionsControllerFindOneBy>>>
export type QuestionsControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof questionsControllerUpdate>>>
export type QuestionsControllerDeleteResult = NonNullable<Awaited<ReturnType<typeof questionsControllerDelete>>>
export type QuestionsControllerCreatePublicResult = NonNullable<Awaited<ReturnType<typeof questionsControllerCreatePublic>>>
export type EducationControllerCreateResult = NonNullable<Awaited<ReturnType<typeof educationControllerCreate>>>
export type EducationControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof educationControllerFindAll>>>
export type EducationControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof educationControllerFindOne>>>
export type EducationControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof educationControllerUpdate>>>
export type EducationControllerRemoveResult = NonNullable<Awaited<ReturnType<typeof educationControllerRemove>>>
export type EduFormControllerCreateResult = NonNullable<Awaited<ReturnType<typeof eduFormControllerCreate>>>
export type EduFormControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof eduFormControllerFindAll>>>
export type EduFormControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof eduFormControllerFindOne>>>
export type EduLinkControllerCreateResult = NonNullable<Awaited<ReturnType<typeof eduLinkControllerCreate>>>
export type EduLinkControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof eduLinkControllerFindAll>>>
export type EduLinkControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof eduLinkControllerFindOne>>>
export type EduLinkControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof eduLinkControllerUpdate>>>
export type EduLinkControllerRemoveResult = NonNullable<Awaited<ReturnType<typeof eduLinkControllerRemove>>>
export type BusinessVerificationControllerVerifyBusinessResult = NonNullable<Awaited<ReturnType<typeof businessVerificationControllerVerifyBusiness>>>
export type BusinessVerificationControllerGetVerificationStatusResult = NonNullable<Awaited<ReturnType<typeof businessVerificationControllerGetVerificationStatus>>>
export type AdminApprovalControllerGetPendingVerificationsResult = NonNullable<Awaited<ReturnType<typeof adminApprovalControllerGetPendingVerifications>>>
export type AdminApprovalControllerApproveVerificationResult = NonNullable<Awaited<ReturnType<typeof adminApprovalControllerApproveVerification>>>
export type AdminApprovalControllerRejectVerificationResult = NonNullable<Awaited<ReturnType<typeof adminApprovalControllerRejectVerification>>>
export type ProposalSampleControllerCreateResult = NonNullable<Awaited<ReturnType<typeof proposalSampleControllerCreate>>>
export type ProposalSampleControllerFindAllResult = NonNullable<Awaited<ReturnType<typeof proposalSampleControllerFindAll>>>
export type ProposalSampleControllerFindOneResult = NonNullable<Awaited<ReturnType<typeof proposalSampleControllerFindOne>>>
export type ProposalSampleControllerUpdateResult = NonNullable<Awaited<ReturnType<typeof proposalSampleControllerUpdate>>>
export type ProposalSampleControllerRemoveResult = NonNullable<Awaited<ReturnType<typeof proposalSampleControllerRemove>>>
